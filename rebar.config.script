ErlangExports = erlang:module_info(exports),
Check = fun({F, A}) when is_atom(F), is_integer(A), A >= 0 ->
            erlang:is_builtin(erlang, F, A) orelse lists:member({F, A}, ErlangExports);
           ({M, F, A}) when is_atom(M), is_atom(F), is_integer(A), A >= 0 ->
            erlang:is_builtin(M, F, A) orelse (catch lists:member({F, A}, M:module_info(exports))) =:= true
        end,

BIFs = [{binary_to_integer, 1},
        {binary_to_float, 1},
        {integer_to_binary, 1},
        {integer_to_binary, 2},
        {float_to_binary, 1},
        {float_to_binary, 2},
        {float_to_list, 2},
        {ceil, 1},
        {floor, 1},
        {get_keys, 0},
        {is_map, 1},
        {map_size, 1}],
Funs = [{binary_to_integer, 2},
        {erlang, delete_element, 2},
        {erlang, insert_element, 3},
        {erlang, convert_time_unit, 3},
        {erlang, monotonic_time, 0},
        {erlang, monotonic_time, 1},
        {erlang, system_time, 0},
        {erlang, system_time, 1},
        {erlang, time_offset, 0},
        {erlang, time_offset, 1},
        {erlang, unique_integer, 0},
        {erlang, unique_integer, 1},
        {application, ensure_started, 1},
        {application, ensure_started, 2},
        {application, ensure_all_started, 1},
        {application, ensure_all_started, 2},
        {application, get_env, 3},
        {calendar, system_time_to_local_time, 2},
        {calendar, system_time_to_universal_time, 2},
        {code, modified_modules, 0},
        {code, module_status, 1},
        {compile, env_compiler_options, 0},
        {crypto, dss_sign, 2},
        {crypto, dss_sign, 3},
        {crypto, dss_verify, 3},
        {crypto, dss_verify, 4},
        {crypto, hmac, 3},
        {crypto, hmac, 4},
        {crypto, rsa_sign, 2},
        {crypto, rsa_sign, 3},
        {crypto, rsa_verify, 3},
        {crypto, rsa_verify, 4},
        {crypto, sha224, 1},
        {crypto, sha256, 1},
        {crypto, sha384, 1},
        {crypto, sha512, 1},
        {crypto, sha224_init, 0},
        {crypto, sha256_init, 0},
        {crypto, sha384_init, 0},
        {crypto, sha512_init, 0},
        {crypto, sha224_mac, 2},
        {crypto, sha224_mac, 3},
        {crypto, sha256_mac, 2},
        {crypto, sha256_mac, 3},
        {crypto, sha384_mac, 2},
        {crypto, sha384_mac, 3},
        {crypto, sha512_mac, 2},
        {crypto, sha512_mac, 3},
        {crypto, sign, 4},
        {crypto, supports, 1},
        {crypto, verify, 5},
        {ct, get_progname, 0},
        {dict, is_empty, 1},
        {dict, take, 2},
        {edlin, current_chars, 1},
        {edlin, start, 2},
        {epp, parse_file, 2},
        {erl_anno, new, 1},
        {erl_compile, compile_cmdline, 0},
        {erl_error, format_call, 5},
        {erl_error, format_exception, 7},
        {erl_error, format_stacktrace, 5},
        {erl_eval, extended_parse_exprs, 1},
        {erl_eval, extended_parse_term, 1},
        {erl_eval, subst_values_for_vars, 2},
        {erl_scan, category, 1},
        {erl_scan, column, 1},
        {erl_scan, line, 1},
        {erl_scan, location, 1},
        {erl_scan, symbol, 1},
        {erl_scan, text, 1},
        {erl_scan, continuation_location, 1},
        {erl_syntax, char_literal, 2},
        {erl_syntax, record_access, 2},
        {erl_syntax, string_literal, 2},
        {error_handler, raise_undef_exception, 3},
        {error_logger, get_format_depth, 0},
        {error_logger, limit_term, 1},
        {ets, take, 2},
        {ets, update_counter, 4},
        {file, list_dir_all, 1},
        {file, read_link_all, 1},
        {filename, safe_relative_path, 1},
        {gb_sets, iterator_from, 2},
        {gb_trees, iterator_from, 2},
        {gb_trees, take, 2},
        {gb_trees, take_any, 2},
        {gen, debug_options, 1},
        {gen, debug_options, 2},
        {gen, get_parent, 0},
        {gen, get_proc_name, 1},
        {gen, get_name, 1},
        {gen, unregister_name, 1},
        {gen_event, system_get_state, 1},
        {gen_event, system_replace_state, 2},
        {gen_fsm, system_get_state, 1},
        {gen_fsm, system_replace_state, 2},
        {gen_server, system_get_state, 1},
        {gen_server, system_replace_state, 2},
        {inet, ipv4_mapped_ipv6_address, 1},
        {inet, ntoa, 1},
        {inet, parse_address, 1},
        {inet, parse_ipv4_address, 1},
        {inet, parse_ipv4strict_address, 1},
        {inet, parse_ipv6_address, 1},
        {inet, parse_ipv6strict_address, 1},
        {inet, parse_strict_address, 1},
        {inet_parse, strict_address, 1},
        {io_lib, limit_term, 2},
        {lib, error_message, 2},
        {lib, format_exception, 7},
        {lib, format_fun, 5},
        {lib, format_stacktrace, 5},
        {lib, flush_receive, 0},
        {lib, nonl, 1},
        {lib, progname, 0},
        {lib, send, 2},
        {lib, sendw, 2},
        {lists, droplast, 1},
        {lists, join, 2},
        {lists, search, 2},
        {io_lib, deep_latin1_char_list, 1},
        {io_lib, latin1_char_list, 1},
        {io_lib, printable_latin1_list, 1},
        {io_lib, write_char_as_latin1, 1},
        {io_lib, write_latin1_char, 1},
        {io_lib, write_latin1_string, 1},
        {io_lib, write_latin1_string, 2},
        {io_lib, write_string_as_latin1, 1},
        {io_lib, write_string_as_latin1, 2},
        {maps, filter, 2},
        {maps, find, 2},
        {maps, fold, 3},
        {maps, from_list, 1},
        {maps, get, 2},
        {maps, get, 3},
        {maps, is_key, 2},
        {maps, keys, 1},
        {maps, map, 2},
        {maps, merge, 2},
        {maps, new, 0},
        {maps, put, 3},
        {maps, remove, 2},
        {maps, size, 1},
        {maps, take, 2},
        {maps, to_list, 1},
        {maps, update, 3},
        {maps, update_with, 3},
        {maps, update_with, 4},
        {maps, values, 1},
        {maps, with, 2},
        {maps, without, 2},
        {math, ceil, 1},
        {math, floor, 1},
        {math, log2, 1},
        {orddict, is_empty, 1},
        {orddict, take, 2},
        {ordsets, is_empty, 1},
        {os, cmd, 2},
        {os, getenv, 2},
        {os, system_time, 1},
        {rand, seed, 1},
        {sets, is_empty, 1},
        {ssl, connection_information, 1},
        {ssl, connection_information, 2},
        {string, length, 1},
        {supervisor, get_childspec, 2},
        {uri_string, is_host, 1},
        {uri_string, is_path, 1},
        {uri_string, parse, 1},
        {zlib, compress, 2},
        {zlib, gzip, 2},
        {zlib, zip, 2}],

lists:keystore(erl_opts, 1, CONFIG,
               {erl_opts,
                [{d, 'DICT_RECORD_SIZE', tuple_size(dict:new())}|proplists:get_value(erl_opts, CONFIG, [])] ++
                case erlang:system_info(version) of
                    "6." ++ _ -> [{d, 'HAVE_MAP_SYNTAX_6'}];
                    _ -> []
                end ++
                case lists:keymember(md5, 1, erlang:get_module_info(erlang)) of
                    true -> [{d, 'HAVE_erlang__get_module_info__md5'}];
                    _false -> []
                end ++
                lists:map(fun(E) ->
                              {d, list_to_atom(lists:flatten(io_lib:format("HAVE_~s__~s_~B",
                                                                           case E of
                                                                               {M, F, A} -> [M, F, A];
                                                                               {F, A} -> [erlang, F, A]
                                                                           end)))}
                          end, lists:filter(Check, BIFs ++ Funs))}) ++
case string:to_integer(erlang:system_info(otp_release)) of
    {R, _} when is_integer(R), R >= 20 -> [];
    _ -> [{pre_hooks, [{compile, "make -s -C src/uc_spec unicode_util.erl"}]},
          {post_hooks, [{clean, "rm -f src/uc_spec/*.erl"}]}]
end.
