ErlangExports = erlang:module_info(exports),
Check = fun({F, A}) when is_atom(F), is_integer(A), A >= 0 ->
            erlang:is_builtin(erlang, F, A) orelse lists:member({F, A}, ErlangExports);
           ({M, F, A}) when is_atom(M), is_atom(F), is_integer(A), A >= 0 ->
            erlang:is_builtin(M, F, A) orelse (catch lists:member({F, A}, M:module_info(exports))) =:= true
        end,

BIFs = [{atom_to_binary, 1},
        {binary_to_atom, 1},
        {binary_to_existing_atom, 1},
        {ceil, 1},
        {floor, 1}],
Funs = [{application, set_env, 1},
        {application, set_env, 2},
        {application_controller, set_env, 2},
        {calendar, system_time_to_local_time, 2},
        {calendar, system_time_to_universal_time, 2},
        {code, all_available, 0},
        {code, modified_modules, 0},
        {code, module_status, 1},
        {compile, env_compiler_options, 0},
        {crypto, dss_sign, 2},
        {crypto, dss_sign, 3},
        {crypto, dss_verify, 3},
        {crypto, dss_verify, 4},
        {crypto, rsa_sign, 2},
        {crypto, rsa_sign, 3},
        {crypto, rsa_verify, 3},
        {crypto, rsa_verify, 4},
        {crypto, sha224, 1},
        {crypto, sha256, 1},
        {crypto, sha384, 1},
        {crypto, sha512, 1},
        {crypto, sha224_init, 0},
        {crypto, sha256_init, 0},
        {crypto, sha384_init, 0},
        {crypto, sha512_init, 0},
        {crypto, sha224_mac, 2},
        {crypto, sha224_mac, 3},
        {crypto, sha256_mac, 2},
        {crypto, sha256_mac, 3},
        {crypto, sha384_mac, 2},
        {crypto, sha384_mac, 3},
        {crypto, sha512_mac, 2},
        {crypto, sha512_mac, 3},
        {crypto, supports, 1},
        {ct, get_progname, 0},
        {dict, take, 2},
        {erl_eval, extended_parse_exprs, 1},
        {erl_eval, extended_parse_term, 1},
        {erl_eval, subst_values_for_vars, 2},
        {erl_syntax, record_access, 2},
        {error_logger, get_format_depth, 0},
        {error_logger, limit_term, 1},
        {erts_internal, map_next, 3},
        {ets, take, 2},
        {ets, update_counter, 4},
        {file, del_dir_r, 1},
        {file, delete, 2},
        {filelib, safe_relative_path, 2},
        {filename, safe_relative_path, 1},
        {gb_sets, iterator_from, 2},
        {gb_trees, iterator_from, 2},
        {gb_trees, take, 2},
        {gb_trees, take_any, 2},
        {gen, debug_options, 1},
        {gen, debug_options, 2},
        {gen, get_parent, 0},
        {gen, get_proc_name, 1},
        {gen, get_name, 1},
        {gen, name, 1},
        {gen, unregister_name, 1},
        {inet, ipv4_mapped_ipv6_address, 1},
        {io_lib, limit_term, 2},
        {lib, error_message, 2},
        {lib, flush_receive, 0},
        {lib, nonl, 1},
        {lib, progname, 0},
        {lib, send, 2},
        {lib, sendw, 2},
        {lists, join, 2},
        {lists, search, 2},
        {maps, filtermap, 2},
        {maps, from_keys, 2},
        {maps, intersect, 2},
        {maps, intersect_with, 3},
        {maps, iterator, 1},
        {maps, merge_with, 3},
        {maps, next, 1},
        {maps, take, 2},
        {maps, update_with, 3},
        {maps, update_with, 4},
        {math, ceil, 1},
        {math, floor, 1},
        {math, log2, 1},
        {orddict, take, 2},
        {ordsets, is_empty, 1},
        {os, cmd, 2},
        {os, env, 0}, % OTP 24.0
        {os, getenv, 2},
        {os, list_env_vars, 0},
        {os, system_time, 1},
        {proplists, to_map, 1},
        {proplists, to_map, 2},
        {queue, all, 2},
        {queue, any, 2},
        {queue, delete, 2},
        {queue, delete_r, 2},
        {queue, delete_with, 2},
        {queue, delete_with_r, 2},
        {queue, filtermap, 2},
        {queue, foreach, 2},
        {queue, fold, 3},
        {rand, seed, 1},
        {sets, is_empty, 1},
        {ssl, connection_information, 1},
        {ssl, connection_information, 2},
        {string, length, 1},
        {supervisor, format_status, 2},
        {supervisor, get_callback_module, 1},
        {supervisor, get_childspec, 2},
        {supervisor, try_again_restart, 2},
        {unicode_util, casefold, 1},
        {unicode_util, cp, 1},
        {unicode_util, gc, 1},
        {unicode_util, get_case, 1},
        {unicode_util, is_whitespace, 1},
        {unicode_util, lookup, 1},
        {unicode_util, lowercase, 1},
        {unicode_util, nfc, 1},
        {unicode_util, nfd, 1},
        {unicode_util, nfkc, 1},
        {unicode_util, nfkd, 1},
        {unicode_util, spec_version, 0},
        {unicode_util, titlecase, 1},
        {unicode_util, uppercase, 1},
        {unicode_util, whitespace, 0},
        {uri_string, compose_query, 1},
        {uri_string, compose_query, 2},
        {uri_string, dissect_query, 1},
        {uri_string, is_host, 1},
        {uri_string, is_path, 1},
        {uri_string, normalize, 1},
        {uri_string, normalize, 2},
        {uri_string, parse, 1},
        {uri_string, recompose, 1},
        {uri_string, transcode, 2},
        {zlib, compress, 2},
        {zlib, gzip, 2},
        {zlib, zip, 2}],

OTPRelease = list_to_integer(erlang:system_info(otp_release)),

ErlOpts = case lists:keyfind(erl_opts, 1, CONFIG) of
              {_, EO} -> EO;
              _ -> []
          end,

SrcDirs = case lists:keyfind(src_dirs, 1, ErlOpts) of
              {_, [_|_] = SD} -> SD;
              _ -> ["src"]
          end,

lists:keystore(erl_opts, 1,
               if
                   OTPRelease >= 23 ->
                       case lists:keyfind(xref_checks, 1, CONFIG) of
                           {_, [_|_] = XRef} ->
                               lists:keystore(xref_checks, 1, CONFIG,
                                              {xref_checks, XRef -- [deprecated_function_calls, deprecated_functions]});
                           _ -> CONFIG
                       end;
                   true -> CONFIG
               end,
               {erl_opts,
                lists:keystore(src_dirs, 1, ErlOpts, {src_dirs, case code:which(pg) of
                                                                    non_existing -> SrcDirs ++ ["src_ext"];
                                                                    _ -> SrcDirs -- ["src_ext"]
                                                                end}) ++
                case erlang:system_info(version) of
                    "6." ++ _ -> [{d, 'HAVE_MAP_SYNTAX_6'}];
                    _ -> []
                end ++
                case lists:keymember(md5, 1, erlang:get_module_info(erlang)) of
                    true -> [{d, 'HAVE_erlang__get_module_info__md5'}];
                    _false -> []
                end ++
                lists:map(fun(E) ->
                              {d, list_to_atom(lists:flatten(io_lib:format("HAVE_~s__~s_~B",
                                                                           case E of
                                                                               {M, F, A} -> [M, F, A];
                                                                               {F, A} -> [erlang, F, A]
                                                                           end)))}
                          end, lists:filter(Check, BIFs ++ Funs))}) ++
if
    OTPRelease >= 20 -> [];
    true -> [{pre_hooks, [{compile, "make -s -C src/uc_spec otpbp_unicode_util.erl"}]},
             {post_hooks, [{clean, "rm -f src/uc_spec/*.erl"}]}]
end.
