-module(uri_string_tests).

-compile({parse_transform, otpbp_pt}).

-include_lib("eunit/include/eunit.hrl").

normalize_test() ->
    OTPRelease = list_to_integer(erlang:system_info(otp_release)),
    ?assertEqual("/a/g", uri_string:normalize("/a/b/c/./../../g")),
    ?assertEqual(<<"mid/6">>, uri_string:normalize(<<"mid/content=5/../6">>)),
    ?assertEqual("http://localhost-%C3%B6rebro/a/g",
                 uri_string:normalize("http://localhos%74-%c3%b6rebro:80/a/b/c/./../../g")),
    ?assertEqual(<<"http://localhost-%C3%B6rebro/a/g">>,
                 uri_string:normalize(<<"http://localhos%74-%c3%b6rebro:80/a/b/c/./../../g">>)),
    ?assertEqual(<<"https://localhost/">>, uri_string:normalize(<<"https://localhost:443">>)),
    ?assertEqual(<<"https://localhost:445/">>, uri_string:normalize(<<"https://localhost:445">>)),
    ?assertEqual(<<"ftp://localhost">>, uri_string:normalize(<<"ftp://localhost:21">>)),
    ?assertEqual(<<"ssh://localhost">>, uri_string:normalize(<<"ssh://localhost:22">>)),
    ?assertEqual(<<"sftp://localhost">>, uri_string:normalize(<<"sftp://localhost:22">>)),
    ?assertEqual(<<"tftp://localhost">>, uri_string:normalize(<<"tftp://localhost:69">>)),
    ?assertEqual(<<"/foo/%2F/bar">>, uri_string:normalize(<<"/foo/%2f/%62ar">>)),
    ?assertEqual(<<"https://localhost/">>, uri_string:normalize(<<"https://localhost">>)),
    ?assertEqual(<<"https://localhost/">>, uri_string:normalize(<<"https://localhost/">>)),
    (OTPRelease >= 25 orelse OTPRelease < 21) andalso
    begin
    ?assertEqual(<<"https://localhost/">>, uri_string:normalize(<<"https://localhost:/">>)),
    ?assertEqual(<<"https://localhost/">>, uri_string:normalize(<<"https://localhost:">>)),
    ?assertEqual(<<"yeti://localhost/">>, uri_string:normalize(<<"yeti://localhost:/">>)),
    ?assertEqual(<<"yeti://localhost">>, uri_string:normalize(<<"yeti://localhost:">>))
    end,
    %
    ?assertEqual("/a/g", uri_string:normalize(#{path => "/a/b/c/./../../g"})),
    ?assertEqual(<<"mid/6">>, uri_string:normalize(#{path => <<"mid/content=5/../6">>})),
    ?assertEqual("http://localhost-%C3%B6rebro/a/g",
                 uri_string:normalize(#{scheme => "http", port => 80, path => "/a/b/c/./../../g",
                                        host => "localhost-örebro"})),
    ?assertEqual(<<"http://localhost-%C3%B6rebro/a/g">>,
                 uri_string:normalize(#{scheme => <<"http">>, port => 80, path => <<"/a/b/c/./../../g">>,
                                        host => <<"localhost-örebro"/utf8>>})),
    ?assertEqual(<<"https://localhost/">>,
                 uri_string:normalize(#{scheme => <<"https">>, port => 443, path => <<>>, host => <<"localhost">>})),
    ?assertEqual(<<"https://localhost:445/">>,
                 uri_string:normalize(#{scheme => <<"https">>, port => 445, path => <<>>, host => <<"localhost">>})),
    ?assertEqual(<<"ftp://localhost">>,
                 uri_string:normalize(#{scheme => <<"ftp">>, port => 21, path => <<>>, host => <<"localhost">>})),
    ?assertEqual(<<"ssh://localhost">>,
                 uri_string:normalize(#{scheme => <<"ssh">>, port => 22, path => <<>>, host => <<"localhost">>})),
    ?assertEqual(<<"sftp://localhost">>,
                 uri_string:normalize(#{scheme => <<"sftp">>, port => 22, path => <<>>, host => <<"localhost">>})),
    ?assertEqual(<<"tftp://localhost">>,
                 uri_string:normalize(#{scheme => <<"tftp">>, port => 69, path => <<>>, host => <<"localhost">>})),
    ?assertEqual("/foo/%2F/bar", uri_string:normalize(#{path => "/foo/%2f/%62ar"})),
    (OTPRelease >= 25 orelse OTPRelease < 21) andalso
    begin
    ?assertEqual(<<"https://localhost/">>,
                 uri_string:normalize(#{scheme => <<"https">>, port => undefined, path => <<>>,
                                        host => <<"localhost">>})),
    ?assertEqual(<<"yeti://localhost">>,
                 uri_string:normalize(#{scheme => <<"yeti">>, port => undefined, path => <<>>,
                                        host => <<"localhost">>}))
    end,
    %
    ?assertEqual(#{scheme => "http", path => "/a/g", host => "localhost-örebro"},
                 uri_string:percent_decode(uri_string:normalize("http://localhos%74-%c3%b6rebro:80/a/b/c/./../../g",
                                                                [return_map]))),
    ?assertEqual(#{scheme => <<"http">>, path => <<"/a/g">>, host => <<"localhost-örebro"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"http://localhos%74-%c3%b6rebro:80/a/b/c/./../../g">>,
                                                                [return_map]))),
    ?assertEqual(#{scheme => <<"https">>, path => <<"/">>, host => <<"localhost">>},
                 uri_string:percent_decode(uri_string:normalize(#{scheme => <<"https">>, port => 443, path => <<>>,
                                                                  host => <<"localhost">>},
                                                                [return_map]))),
    %
    ?assertEqual({error, invalid_uri, ":"}, uri_string:normalize("http://local>host")),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:normalize(<<"http://local>host">>)),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:normalize("http://[192.168.0.1]", [return_map])),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:normalize(<<"http://[192.168.0.1]">>, [return_map])),
    (OTPRelease >= 24 orelse OTPRelease < 21) andalso
    ?assertEqual({error, invalid_utf8, <<47, 47, 0, 0, 0, 246>>},
                 uri_string:percent_decode(uri_string:normalize("//%00%00%00%F6"))),
    %
    ?assertEqual(#{scheme => <<"user">>, path => <<"合@気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"user:%E5%90%88@%E6%B0%97%E9%81%93">>, [return_map]))),
    ?assertEqual(#{path => <<"合気道@"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"%E5%90%88%E6%B0%97%E9%81%93@">>, [return_map]))),
    ?assertEqual(#{path => <<"/合気道@"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"/%E5%90%88%E6%B0%97%E9%81%93@">>, [return_map]))),
    ?assertEqual(#{path => <<"合@気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"%E5%90%88@%E6%B0%97%E9%81%93">>, [return_map]))),
    ?assertMatch(#{userinfo := <<"合"/utf8>>, host := <<"気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"//%E5%90%88@%E6%B0%97%E9%81%93">>, [return_map]))),
    ?assertMatch(#{userinfo := <<"合:気"/utf8>>, host := <<"道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"//%E5%90%88:%E6%B0%97@%E9%81%93">>, [return_map]))),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/合気道@"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"foo:/%E5%90%88%E6%B0%97%E9%81%93@">>, [return_map]))),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"合"/utf8>>, host := <<"気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"foo://%E5%90%88@%E6%B0%97%E9%81%93">>,
                                                                [return_map]))),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"合:気"/utf8>>, host := <<"道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"foo://%E5%90%88:%E6%B0%97@%E9%81%93">>,
                                                                [return_map]))),
    ?assertEqual({error, invalid_uri, "@"}, uri_string:normalize(<<"//%E5%90%88@%E6%B0%97%E9%81%93@">>, [return_map])),
    ?assertEqual({error, invalid_uri, ":"},
                 uri_string:normalize(<<"foo://%E5%90%88@%E6%B0%97%E9%81%93@">>, [return_map])),
    %
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<"/">>, query => <<"name=合気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"foo://example.com/?name=%E5%90%88%E6%B0%97%E9%81%93">>,
                                                                [return_map]))),
    ?assertEqual(#{host => <<"example.com">>, path => <<"/">>, query => <<"name=合気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"//example.com/?name=%E5%90%88%E6%B0%97%E9%81%93">>,
                                                                [return_map]))),
    %
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, fragment := <<"合気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"foo://example.com#%E5%90%88%E6%B0%97%E9%81%93">>,
                                                                [return_map]))),
    ?assertEqual(#{host => <<"example.com">>, path => <<"/">>, fragment => <<"合気道"/utf8>>},
                 uri_string:percent_decode(uri_string:normalize(<<"//example.com/#%E5%90%88%E6%B0%97%E9%81%93">>,
                                                                [return_map]))),
    %
    ?assertEqual(#{scheme => "user", path => "合@気道"},
                 uri_string:percent_decode(uri_string:normalize("user:%E5%90%88@%E6%B0%97%E9%81%93", [return_map]))),
    ?assertEqual(#{path => "合気道@"},
                 uri_string:percent_decode(uri_string:normalize("%E5%90%88%E6%B0%97%E9%81%93@", [return_map]))),
    ?assertEqual(#{path => "/合気道@"},
                 uri_string:percent_decode(uri_string:normalize("/%E5%90%88%E6%B0%97%E9%81%93@", [return_map]))),
    ?assertEqual(#{path => "合@気道"},
                 uri_string:percent_decode(uri_string:normalize("%E5%90%88@%E6%B0%97%E9%81%93", [return_map]))),
    ?assertMatch(#{userinfo := "合", host := "気道"},
                 uri_string:percent_decode(uri_string:normalize("//%E5%90%88@%E6%B0%97%E9%81%93", [return_map]))),
    ?assertMatch(#{userinfo := "合:気", host := "道"},
                 uri_string:percent_decode(uri_string:normalize("//%E5%90%88:%E6%B0%97@%E9%81%93", [return_map]))),
    ?assertEqual(#{scheme => "foo", path => "/合気道@"},
                 uri_string:percent_decode(uri_string:normalize("foo:/%E5%90%88%E6%B0%97%E9%81%93@", [return_map]))),
    ?assertMatch(#{scheme := "foo", userinfo := "合", host := "気道"},
                 uri_string:percent_decode(uri_string:normalize("foo://%E5%90%88@%E6%B0%97%E9%81%93", [return_map]))),
    ?assertMatch(#{scheme := "foo", userinfo := "合:気", host := "道"},
                 uri_string:percent_decode(uri_string:normalize("foo://%E5%90%88:%E6%B0%97@%E9%81%93", [return_map]))),
    ?assertEqual({error, invalid_uri, "@"}, uri_string:normalize("//%E5%90%88@%E6%B0%97%E9%81%93@", [return_map])),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:normalize("foo://%E5%90%88@%E6%B0%97%E9%81%93@", [return_map])),
    %
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/", query => "name=合気道"},
                 uri_string:percent_decode(uri_string:normalize("foo://example.com/?name=%E5%90%88%E6%B0%97%E9%81%93",
                                                                [return_map]))),
    ?assertEqual(#{host => "example.com", path => "/", query => "name=合気道"},
                 uri_string:percent_decode(uri_string:normalize("//example.com/?name=%E5%90%88%E6%B0%97%E9%81%93",
                                                                [return_map]))),
    %
    ?assertMatch(#{scheme := "foo", host := "example.com", fragment := "合気道"},
                 uri_string:percent_decode(uri_string:normalize("foo://example.com#%E5%90%88%E6%B0%97%E9%81%93",
                                                                [return_map]))),
    ?assertEqual(#{host => "example.com", path => "/", fragment => "合気道"},
                 uri_string:percent_decode(uri_string:normalize("//example.com/#%E5%90%88%E6%B0%97%E9%81%93",
                                                                [return_map]))),
    %
    (OTPRelease >= 24 orelse OTPRelease < 21) andalso
    begin
    ?assertEqual({error, {invalid, {host, {invalid_utf8, <<0, 0, 0, 246>>}}}},
                 uri_string:percent_decode(uri_string:normalize(#{host => "%00%00%00%F6", path => ""}, [return_map]))),
    ?assertEqual({error, invalid_utf8, <<47, 47, 0, 0, 0, 246>>},
                 uri_string:percent_decode(uri_string:normalize(#{host => "%00%00%00%F6", path => ""}, []))),
    ?assertEqual({error, {invalid, {host, {invalid_utf8, <<0, 0, 0, 246>>}}}},
                 uri_string:percent_decode(uri_string:normalize("//%00%00%00%F6", [return_map]))),
    ?assertEqual({error, invalid_utf8, <<47, 47, 0, 0, 0, 246>>},
                 uri_string:percent_decode(uri_string:normalize("//%00%00%00%F6", [])))
    end,
    %
    ?assertEqual("foo://bar", uri_string:normalize("FOo://Bar")),
    ?assertEqual(#{host => "bar", path => "", scheme => "foo"}, uri_string:normalize("FOo://Bar", [return_map])),
    ?assertEqual("foo://bar", uri_string:normalize("foo://bar")),
    ?assertEqual(#{host => "bar", path => "", scheme => "foo"}, uri_string:normalize("foo://bar", [return_map])),
    ?assertEqual("foo://a%2F/bar", uri_string:normalize("foo://A%2f/%62ar")),
    ?assertEqual(#{host => "a%2F", path => "/bar", scheme => "foo"},
                 uri_string:normalize("foo://A%2f/%62ar", [return_map])),
    ?assertEqual("foo://a%2F/bar", uri_string:normalize("foo://a%2F/bar")),
    ?assertEqual(#{host => "a%2F", path => "/bar", scheme => "foo"},
                 uri_string:normalize("foo://a%2F/bar", [return_map])),
    ?assertEqual("foo://%C3%B6", uri_string:normalize("FOo://%C3%B6")),
    ?assertEqual(#{host => "ö", path => "", scheme => "foo"},
                 uri_string:percent_decode(uri_string:normalize("FOo://%C3%B6", [return_map]))),
    ?assertEqual("foo://bar", uri_string:normalize(#{host => "Bar",path => "",scheme => "FOo"})),
    ?assertEqual(#{host => "bar", path => "", scheme => "foo"},
                 uri_string:normalize(#{host => "Bar", path => "", scheme => "FOo"}, [return_map])),
    ?assertEqual("foo://bar", uri_string:normalize(#{host => "bar",path => "",scheme => "foo"})),
    ?assertEqual(#{host => "bar", path => "", scheme => "foo"},
                 uri_string:normalize(#{host => "bar", path => "", scheme => "foo"}, [return_map])),
    ?assertEqual("foo://a%2F/bar", uri_string:normalize(#{host => "A%2f",path => "/%62ar",scheme => "foo"})),
    ?assertEqual(#{host => "a%2F", path => "/bar", scheme => "foo"},
                 uri_string:normalize(#{host => "A%2f", path => "/%62ar", scheme => "foo"}, [return_map])),
    ?assertEqual("foo://a%2F/bar", uri_string:normalize(#{host => "a%2F",path => "/bar",scheme => "foo"})),
    ?assertEqual(#{host => "a%2F", path => "/bar", scheme => "foo"},
                 uri_string:normalize(#{host => "a%2F", path => "/bar", scheme => "foo"}, [return_map])),
    ?assertEqual("foo://%C3%B6", uri_string:normalize(#{host => "%C3%B6",path => "",scheme => "FOo"})),
    ?assertEqual(#{host => "ö", path => "", scheme => "foo"},
                 uri_string:percent_decode(uri_string:normalize(#{host => "%C3%B6", path => "", scheme => "FOo"},
                                           [return_map]))),
    ?assertEqual("foo://%C3%B6", uri_string:normalize(#{host => "ö",path => "",scheme => "FOo"})),
    ?assertEqual(#{host => "ö", path => "", scheme => "foo"},
                 uri_string:normalize(#{host => "ö", path => "", scheme => "FOo"}, [return_map])),
    ok.

compose_query_test() ->
    ?assertEqual("", uri_string:compose_query("")),
    ?assertEqual("foo=1&bar=2", uri_string:compose_query([{<<"foo">>, "1"}, {"bar", "2"}])),
    erlang:system_info(otp_release) =/= "21" andalso
    begin
    ?assertEqual("foo=1&bar", uri_string:compose_query([{<<"foo">>, "1"}, {"bar", true}])),
    ?assertEqual("foo&b%E4r=2", uri_string:compose_query([{"foo", true}, {"bär", "2"}], [{encoding, latin1}]))
    end,
    ?assertEqual("foo=1&b%C3%A4r=2", uri_string:compose_query([{"foo", "1"}, {"bär", "2"}], [{encoding, utf8}])),
    ?assertEqual("foo=1&b%C3%A4r=2", uri_string:compose_query([{"foo", "1"}, {"bär", "2"}], [{encoding, unicode}])),
    ?assertEqual("foo=1&b%E4r=2", uri_string:compose_query([{"foo", "1"}, {"bär", "2"}], [{encoding, latin1}])),
    ?assertEqual("foo+bar=1&%E5%90%88=2", uri_string:compose_query([{"foo bar", "1"}, {"合", "2"}])),
    ?assertEqual("foo+bar=1&%26%2321512%3B=2",
                 uri_string:compose_query([{"foo bar", "1"}, {"合", "2"}], [{encoding, latin1}])),
    ?assertEqual("foo+bar=1&%C3%B6=2", uri_string:compose_query([{<<"foo bar">>, <<$1>>}, {"ö", <<$2>>}])),
    ?assertEqual(<<"foo+bar=1&%C3%B6=2">>, uri_string:compose_query([{<<"foo bar">>, <<$1>>}, {<<"ö"/utf8>>, <<$2>>}])),
    %
    ?assertEqual([{"合foö bar","1"}, {"合", "合"}],
                 uri_string:dissect_query(uri_string:transcode(uri_string:compose_query([{"合foö bar", "1"},
                                                                                         {"合", "合"}],
                                                                                        [{encoding, latin1}]),
                                                               [{in_encoding, latin1}]))),
    ?assertEqual([{<<"合foö bar"/utf8>>, <<$1>>}, {<<"合"/utf8>>, <<"合"/utf8>>}],
                 uri_string:dissect_query(uri_string:transcode(uri_string:compose_query([{<<"合foö bar"/utf8>>,<<"1">>},
                                                                                         {<<"合"/utf8>>, <<"合"/utf8>>}],
                                                                                        [{encoding,latin1}]),
                                                               [{in_encoding, latin1}]))),
    %
    ?assertEqual({error, invalid_input, 4}, uri_string:compose_query([{"", 4}])),
    ?assertEqual({error, invalid_input, 5}, uri_string:compose_query([{5, ""}])),
    ?assertEqual({error, invalid_encoding, utf16},
                 uri_string:compose_query([{"foo bar", "1"}, {<<"ö">>, "2"}], [{encoding, utf16}])),
    ok.

dissect_query_test() ->
    ?assertEqual("", uri_string:dissect_query("")),
    ?assertEqual([{"foo", "1"}, {"amp;bar", "2"}], uri_string:dissect_query("foo=1&amp;bar=2")),
    ?assertEqual([{"foo", "1"}, {"bar", "2"}], uri_string:dissect_query("foo=1&bar=2")),
    ?assertEqual([{"foo", "1;bar=2"}], uri_string:dissect_query("foo=1;bar=2")),
    ?assertEqual([{"foo", "1"}, {"bar", "222"}], uri_string:dissect_query([<<"foo=1&bar=2">>, "22"])),
    ?assertEqual([{"foo", "ö"}, {"bar", "2"}], uri_string:dissect_query("foo=%C3%B6&bar=2")),
    ?assertEqual([{<<"foo">>, <<"ö"/utf8>>}, {<<"bar">>, <<$2>>}], uri_string:dissect_query(<<"foo=%C3%B6&bar=2">>)),
    ?assertEqual([{"foo bar", "1"}, {"ö", "2"}], uri_string:dissect_query([<<"foo+bar=1&">>, <<"%C3%B6=2">>])),
    ?assertEqual([{"foo bar", "1"}, {[21512], "2"}], uri_string:dissect_query("foo+bar=1&%26%2321512%3B=2")),
    ?assertEqual([{<<"foo bar">>, <<$1>>},{<<"合"/utf8>>, <<$2>>}],
                 uri_string:dissect_query(<<"foo+bar=1&%26%2321512%3B=2">>)),
    ?assertEqual([{"föo bar", "1"}, {"ö", "2"}], uri_string:dissect_query("föo+bar=1&%C3%B6=2")),
    ?assertEqual([{<<"föo bar"/utf8>>, <<$1>>}, {<<"ö"/utf8>>, <<$2>>}],
                 uri_string:dissect_query(<<"föo+bar=1&%C3%B6=2"/utf8>>)),
    erlang:system_info(otp_release) =/= "21" andalso
    begin
    ?assertEqual([{"foo1", true}, {"bar", "2"}], uri_string:dissect_query("foo1&bar=2")),
    ?assertEqual([{<<"foo1">>, <<$1>>}, {<<"bar">>, true}], uri_string:dissect_query(<<"foo1=1&bar">>))
    end,
    %
    ?assertEqual({error, invalid_percent_encoding, "%XX%B6"}, uri_string:dissect_query("foo=%XX%B6&amp;bar=2")),
    ?assertEqual({error, invalid_input, [153]}, uri_string:dissect_query("foo=%99%B6&amp;bar=2")),
    ?assertEqual({error, invalid_character, "ö"}, uri_string:dissect_query(<<"föo+bar=1&%C3%B6=2">>)),
    ?assertEqual({error, invalid_input, <<"ö">>}, uri_string:dissect_query([<<"foo+bar=1&amp;">>, <<"%C3%B6=2ö">>])),
    ok.

parse_test() ->
    ?assertMatch(#{}, uri_string:parse(<<>>)),
    ?assertEqual(#{path => <<"foo">>}, uri_string:parse(<<"foo">>)),
    ?assertMatch(#{scheme := <<"foo">>}, uri_string:parse(<<"foo:">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"bar:nisse">>}, uri_string:parse(<<"foo:bar:nisse">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<>>}, uri_string:parse(<<"foo://">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<>>, path => <<$/>>}, uri_string:parse(<<"foo:///">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<>>, path => <<"//">>}, uri_string:parse(<<"foo:////">>)),
    ?assertEqual(#{path => <<$/>>}, uri_string:parse(<<$/>>)),
    ?assertMatch(#{host := <<>>}, uri_string:parse(<<"//">>)),
    ?assertEqual(#{host => <<>>, path => <<$/>>}, uri_string:parse(<<"///">>)),
    %
    ?assertEqual(#{scheme => <<"user">>, path => <<"password@localhost">>},
                 uri_string:parse(<<"user:password@localhost">>)),
    ?assertEqual(#{path => <<"user@">>}, uri_string:parse(<<"user@">>)),
    ?assertEqual(#{path => <<"/user@">>}, uri_string:parse(<<"/user@">>)),
    ?assertEqual(#{path => <<"user@localhost">>}, uri_string:parse(<<"user@localhost">>)),
    ?assertMatch(#{userinfo := <<"user">>, host := <<"localhost">>}, uri_string:parse(<<"//user@localhost">>)),
    ?assertMatch(#{userinfo := <<"user:password">>, host := <<"localhost">>},
                 uri_string:parse(<<"//user:password@localhost">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/user@">>}, uri_string:parse(<<"foo:/user@">>)),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"user">>, host := <<"localhost">>},
                 uri_string:parse(<<"foo://user@localhost">>)),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"user:password">>, host := <<"localhost">>},
                 uri_string:parse(<<"foo://user:password@localhost">>)),
    %
    ?assertEqual(#{scheme => <<"user">>, path => <<"%E5%90%88@%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"user:%E5%90%88@%E6%B0%97%E9%81%93">>)),
    ?assertEqual(#{path => <<"%E5%90%88%E6%B0%97%E9%81%93@">>}, uri_string:parse(<<"%E5%90%88%E6%B0%97%E9%81%93@">>)),
    ?assertEqual(#{path => <<"/%E5%90%88%E6%B0%97%E9%81%93@">>}, uri_string:parse(<<"/%E5%90%88%E6%B0%97%E9%81%93@">>)),
    ?assertEqual(#{path => <<"%E5%90%88@%E6%B0%97%E9%81%93">>}, uri_string:parse(<<"%E5%90%88@%E6%B0%97%E9%81%93">>)),
    ?assertMatch(#{userinfo := <<"%E5%90%88">>, host := <<"%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"//%E5%90%88@%E6%B0%97%E9%81%93">>)),
    ?assertMatch(#{userinfo := <<"%E5%90%88:%E6%B0%97">>, host := <<"%E9%81%93">>},
                 uri_string:parse(<<"//%E5%90%88:%E6%B0%97@%E9%81%93">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/%E5%90%88%E6%B0%97%E9%81%93@">>},
                 uri_string:parse(<<"foo:/%E5%90%88%E6%B0%97%E9%81%93@">>)),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"%E5%90%88">>, host := <<"%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"foo://%E5%90%88@%E6%B0%97%E9%81%93">>)),
    ?assertMatch(#{scheme := <<"foo">>, userinfo := <<"%E5%90%88:%E6%B0%97">>, host := <<"%E9%81%93">>},
                 uri_string:parse(<<"foo://%E5%90%88:%E6%B0%97@%E9%81%93">>)),
    ?assertEqual({error, invalid_uri, "@"}, uri_string:parse(<<"//%E5%90%88@%E6%B0%97%E9%81%93@">>)),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:parse(<<"foo://%E5%90%88@%E6%B0%97%E9%81%93@">>)),
    %
    ?assertMatch(#{host := <<"hostname">>}, uri_string:parse(<<"//hostname">>)),
    ?assertMatch(#{host := <<"hostname">>, scheme := <<"foo">>}, uri_string:parse(<<"foo://hostname">>)),
    ?assertMatch(#{host := <<"hostname">>, scheme := <<"foo">>, userinfo := <<"user">>},
                 uri_string:parse(<<"foo://user@hostname">>)),
    %
    ?assertMatch(#{host := <<"127.0.0.1">>}, uri_string:parse(<<"//127.0.0.1">>)),
    ?assertEqual(#{host => <<"127.0.0.1">>, path => <<"/over/there">>}, uri_string:parse(<<"//127.0.0.1/over/there">>)),
    ?assertMatch(#{host := <<"127.0.0.1">>, query := <<"name=ferret">>},
                 uri_string:parse(<<"//127.0.0.1?name=ferret">>)),
    ?assertMatch(#{host := <<"127.0.0.1">>, fragment := <<"nose">>}, uri_string:parse(<<"//127.0.0.1#nose">>)),
    ?assertEqual(#{host => <<"127.0.0.x">>, path => <<>>}, uri_string:parse(<<"//127.0.0.x">>)),
    ?assertEqual(#{host => <<"1227.0.0.1">>, path => <<>>}, uri_string:parse(<<"//1227.0.0.1">>)),
    %
    ?assertMatch(#{host := <<"::127.0.0.1">>}, uri_string:parse(<<"//[::127.0.0.1]">>)),
    ?assertMatch(#{host := <<"2001:0db8:0000:0000:0000:0000:1428:07ab">>},
                 uri_string:parse(<<"//[2001:0db8:0000:0000:0000:0000:1428:07ab]">>)),
    ?assertEqual(#{host => <<"::127.0.0.1">>, path => <<"/over/there">>},
                 uri_string:parse(<<"//[::127.0.0.1]/over/there">>)),
    ?assertMatch(#{host := <<"::127.0.0.1">>, query := <<"name=ferret">>},
                 uri_string:parse(<<"//[::127.0.0.1]?name=ferret">>)),
    ?assertMatch(#{host := <<"::127.0.0.1">>, fragment := <<"nose">>},
                 uri_string:parse(<<"//[::127.0.0.1]#nose">>)),
    ?assertEqual({error, invalid_uri, "x"}, uri_string:parse(<<"//[::127.0.0.x]">>)),
    ?assertEqual({error, invalid_uri, "::1227.0.0.1"}, uri_string:parse(<<"//[::1227.0.0.1]">>)),
    ?assertEqual({error, invalid_uri, "G"}, uri_string:parse(<<"//[2001:0db8:0000:0000:0000:0000:1428:G7ab]">>)),
    %
    ?assertEqual(#{path => <<"/:8042">>}, uri_string:parse(<<"/:8042">>)),
    ?assertMatch(#{host := <<>>, port := 8042}, uri_string:parse(<<"//:8042">>)),
    ?assertMatch(#{host := <<"example.com">>, port:= 8042}, uri_string:parse(<<"//example.com:8042">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/:8042">>}, uri_string:parse(<<"foo:/:8042">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<>>, port := 8042}, uri_string:parse(<<"foo://:8042">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, port := 8042},
                 uri_string:parse(<<"foo://example.com:8042">>)),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:parse(":600")),
    ?assertEqual({error, invalid_uri, "x"}, uri_string:parse("//:8042x")),
    %
    ?assertEqual(#{path => <<"over/there">>}, uri_string:parse(<<"over/there">>)),
    ?assertEqual(#{path => <<"/over/there">>}, uri_string:parse(<<"/over/there">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/over/there">>}, uri_string:parse(<<"foo:/over/there">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<"/over/there">>},
                 uri_string:parse(<<"foo://example.com/over/there">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<"/over/there">>, port => 8042},
                 uri_string:parse(<<"foo://example.com:8042/over/there">>)),
    %
    ?assertMatch(#{scheme := <<"foo">>, query := <<"name=ferret">>}, uri_string:parse(<<"foo:?name=ferret">>)),
    ?assertEqual(#{scheme => <<"foo">>, path=> <<"over/there">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"foo:over/there?name=ferret">>)),
    ?assertEqual(#{scheme => <<"foo">>, path=> <<"/over/there">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"foo:/over/there?name=ferret">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, query := <<"name=ferret">>},
                 uri_string:parse(<<"foo://example.com?name=ferret">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<"/">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"foo://example.com/?name=ferret">>)),
    ?assertEqual(#{path => <<>>, query => <<"name=ferret">>}, uri_string:parse(<<"?name=ferret">>)),
    ?assertEqual(#{path => <<"over/there">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"over/there?name=ferret">>)),
    ?assertEqual(#{path => <<"/">>, query => <<"name=ferret">>}, uri_string:parse(<<"/?name=ferret">>)),
    ?assertEqual(#{path => <<"/over/there">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"/over/there?name=ferret">>)),
    ?assertMatch(#{host := <<"example.com">>, query := <<"name=ferret">>},
                 uri_string:parse(<<"//example.com?name=ferret">>)),
    ?assertEqual(#{host => <<"example.com">>, path => <<"/">>, query => <<"name=ferret">>},
                 uri_string:parse(<<"//example.com/?name=ferret">>)),
    %
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<"/">>,
                   query => <<"name=%E5%90%88%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"foo://example.com/?name=%E5%90%88%E6%B0%97%E9%81%93">>)),
    ?assertEqual(#{host => <<"example.com">>, path => <<"/">>, query => <<"name=%E5%90%88%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"//example.com/?name=%E5%90%88%E6%B0%97%E9%81%93">>)),
    %
    ?assertMatch(#{scheme := <<"foo">>, fragment := <<"nose">>}, uri_string:parse(<<"foo:#nose">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"over/there">>, fragment => <<"nose">>},
                 uri_string:parse(<<"foo:over/there#nose">>)),
    ?assertEqual(#{scheme => <<"foo">>, path => <<"/over/there">>, fragment => <<"nose">>},
                 uri_string:parse(<<"foo:/over/there#nose">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, fragment := <<"nose">>},
                 uri_string:parse(<<"foo://example.com#nose">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, path => <<$/>>, fragment => <<"nose">>},
                 uri_string:parse(<<"foo://example.com/#nose">>)),
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, fragment := <<"nose">>},
                 uri_string:parse(<<"foo://example.com#nose">>)),
    ?assertMatch(#{fragment := <<"nose">>}, uri_string:parse(<<"#nose">>)),
    ?assertMatch(#{path := <<"over/there">>, fragment := <<"nose">>}, uri_string:parse(<<"over/there#nose">>)),
    ?assertMatch(#{path := <<"/">>, fragment := <<"nose">>}, uri_string:parse(<<"/#nose">>)),
    ?assertMatch(#{path := <<"/over/there">>, fragment := <<"nose">>}, uri_string:parse(<<"/over/there#nose">>)),
    ?assertMatch(#{host := <<"example.com">>, fragment := <<"nose">>}, uri_string:parse(<<"//example.com#nose">>)),
    ?assertEqual(#{host => <<"example.com">>, path => <<$/>>, fragment => <<"nose">>},
                 uri_string:parse(<<"//example.com/#nose">>)),
    %
    ?assertMatch(#{scheme := <<"foo">>, host := <<"example.com">>, fragment := <<"%E5%90%88%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"foo://example.com#%E5%90%88%E6%B0%97%E9%81%93">>)),
    ?assertEqual(#{host => <<"example.com">>, path => <<$/>>, fragment => <<"%E5%90%88%E6%B0%97%E9%81%93">>},
                 uri_string:parse(<<"//example.com/#%E5%90%88%E6%B0%97%E9%81%93">>)),
    %
    ?assertMatch(#{}, uri_string:parse("")),
    ?assertEqual(#{path => "foo"}, uri_string:parse("foo")),
    ?assertMatch(#{scheme := "foo"}, uri_string:parse("foo:")),
    ?assertEqual(#{scheme => "foo", path => "bar:nisse"}, uri_string:parse("foo:bar:nisse")),
    ?assertMatch(#{scheme := "foo", host := ""}, uri_string:parse("foo://")),
    ?assertEqual(#{scheme => "foo", host => "", path => "/"}, uri_string:parse("foo:///")),
    ?assertEqual(#{scheme => "foo", host => "", path => "//"}, uri_string:parse("foo:////")),
    ?assertEqual(#{path => "/"}, uri_string:parse("/")),
    ?assertMatch(#{host := ""}, uri_string:parse("//")),
    ?assertEqual(#{host => "", path => "/"}, uri_string:parse("///")),
    %
    ?assertEqual(#{scheme => "user", path => "password@localhost"}, uri_string:parse("user:password@localhost")),
    ?assertEqual(#{path => "user@"}, uri_string:parse("user@")),
    ?assertEqual(#{path => "/user@"}, uri_string:parse("/user@")),
    ?assertEqual(#{path => "user@localhost"}, uri_string:parse("user@localhost")),
    ?assertMatch(#{userinfo := "user", host := "localhost"}, uri_string:parse("//user@localhost")),
    ?assertMatch(#{userinfo := "user:password", host := "localhost"}, uri_string:parse("//user:password@localhost")),
    ?assertMatch(#{scheme := "foo", path := "/user@"}, uri_string:parse("foo:/user@")),
    ?assertMatch(#{scheme := "foo", userinfo := "user", host := "localhost"}, uri_string:parse("foo://user@localhost")),
    ?assertMatch(#{scheme := "foo", userinfo := "user:password", host := "localhost"},
                 uri_string:parse("foo://user:password@localhost")),
    %
    ?assertEqual(#{scheme => "user", path => "%E5%90%88@%E6%B0%97%E9%81%93"},
                 uri_string:parse("user:%E5%90%88@%E6%B0%97%E9%81%93")),
    ?assertEqual(#{path => "%E5%90%88%E6%B0%97%E9%81%93@"}, uri_string:parse("%E5%90%88%E6%B0%97%E9%81%93@")),
    ?assertEqual(#{path => "/%E5%90%88%E6%B0%97%E9%81%93@"}, uri_string:parse("/%E5%90%88%E6%B0%97%E9%81%93@")),
    ?assertEqual(#{path => "%E5%90%88@%E6%B0%97%E9%81%93"}, uri_string:parse("%E5%90%88@%E6%B0%97%E9%81%93")),
    ?assertMatch(#{userinfo := "%E5%90%88", host := "%E6%B0%97%E9%81%93"},
                 uri_string:parse("//%E5%90%88@%E6%B0%97%E9%81%93")),
    ?assertMatch(#{userinfo := "%E5%90%88:%E6%B0%97", host := "%E9%81%93"},
                 uri_string:parse("//%E5%90%88:%E6%B0%97@%E9%81%93")),
    ?assertEqual(#{scheme => "foo", path => "/%E5%90%88%E6%B0%97%E9%81%93@"},
                 uri_string:parse("foo:/%E5%90%88%E6%B0%97%E9%81%93@")),
    ?assertMatch(#{scheme := "foo", userinfo := "%E5%90%88", host := "%E6%B0%97%E9%81%93"},
                 uri_string:parse("foo://%E5%90%88@%E6%B0%97%E9%81%93")),
    ?assertMatch(#{scheme := "foo", userinfo := "%E5%90%88:%E6%B0%97", host := "%E9%81%93"},
                 uri_string:parse("foo://%E5%90%88:%E6%B0%97@%E9%81%93")),
    ?assertEqual({error, invalid_uri, "@"}, uri_string:parse("//%E5%90%88@%E6%B0%97%E9%81%93@")),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:parse("foo://%E5%90%88@%E6%B0%97%E9%81%93@")),
    %
    ?assertMatch(#{host := "hostname"}, uri_string:parse("//hostname")),
    ?assertMatch(#{host := "hostname", scheme := "foo"}, uri_string:parse("foo://hostname")),
    ?assertMatch(#{host := "hostname", scheme := "foo", userinfo := "user"}, uri_string:parse("foo://user@hostname")),
    %
    ?assertMatch(#{host := "127.0.0.1"}, uri_string:parse("//127.0.0.1")),
    ?assertMatch(#{host := "2001:0db8:0000:0000:0000:0000:1428:07ab"},
                 uri_string:parse("//[2001:0db8:0000:0000:0000:0000:1428:07ab]")),
    ?assertEqual(#{host => "127.0.0.1", path => "/over/there"}, uri_string:parse("//127.0.0.1/over/there")),
    ?assertMatch(#{host := "127.0.0.1", query := "name=ferret"}, uri_string:parse("//127.0.0.1?name=ferret")),
    ?assertMatch(#{host := "127.0.0.1", fragment := "nose"}, uri_string:parse("//127.0.0.1#nose")),
    ?assertEqual(#{host => "127.0.0.x", path => ""}, uri_string:parse("//127.0.0.x")),
    ?assertEqual(#{host => "1227.0.0.1", path => ""}, uri_string:parse("//1227.0.0.1")),
    %
    ?assertMatch(#{host := "::127.0.0.1"}, uri_string:parse("//[::127.0.0.1]")),
    ?assertEqual(#{host => "::127.0.0.1", path => "/over/there"}, uri_string:parse("//[::127.0.0.1]/over/there")),
    ?assertMatch(#{host := "::127.0.0.1", query := "name=ferret"}, uri_string:parse("//[::127.0.0.1]?name=ferret")),
    ?assertMatch(#{host := "::127.0.0.1", fragment := "nose"}, uri_string:parse("//[::127.0.0.1]#nose")),
    ?assertEqual({error, invalid_uri, "x"}, uri_string:parse("//[::127.0.0.x]")),
    ?assertEqual({error, invalid_uri, "::1227.0.0.1"}, uri_string:parse("//[::1227.0.0.1]")),
    ?assertEqual({error, invalid_uri, "G"}, uri_string:parse("//[2001:0db8:0000:0000:0000:0000:1428:G7ab]")),
    %
    ?assertEqual(#{path => "/:8042"}, uri_string:parse("/:8042")),
    ?assertMatch(#{host := "", port := 8042}, uri_string:parse("//:8042")),
    ?assertMatch(#{host := "example.com", port := 8042}, uri_string:parse("//example.com:8042")),
    ?assertEqual(#{scheme => "foo", path => "/:8042"}, uri_string:parse("foo:/:8042")),
    ?assertMatch(#{scheme := "foo", host := "", port := 8042}, uri_string:parse("foo://:8042")),
    ?assertMatch(#{scheme := "foo", host := "example.com", port := 8042}, uri_string:parse("foo://example.com:8042")),
    ?assertEqual(#{path => "/:"}, uri_string:parse("/:")),
    ?assertMatch(#{host := "", port := undefined}, uri_string:parse("//:")),
    ?assertMatch(#{host := "example.com", port := undefined}, uri_string:parse("//example.com:")),
    ?assertEqual(#{scheme => "foo", path => "/:"}, uri_string:parse("foo:/:")),
    ?assertMatch(#{scheme := "foo", host := "", port := undefined}, uri_string:parse("foo://:")),
    ?assertMatch(#{scheme := "foo", host := "example.com", port := undefined}, uri_string:parse("foo://example.com:")),
    %
    ?assertEqual(#{path => "over/there"}, uri_string:parse("over/there")),
    ?assertEqual(#{path => "/over/there"}, uri_string:parse("/over/there")),
    ?assertEqual(#{scheme => "foo", path => "/over/there"}, uri_string:parse("foo:/over/there")),
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/over/there"},
                 uri_string:parse("foo://example.com/over/there")),
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/over/there", port => 8042},
                 uri_string:parse("foo://example.com:8042/over/there")),
    %
    ?assertMatch(#{scheme := "foo", query := "name=ferret"}, uri_string:parse("foo:?name=ferret")),
    ?assertEqual(#{scheme => "foo", path => "over/there", query => "name=ferret"},
                 uri_string:parse("foo:over/there?name=ferret")),
    ?assertEqual(#{scheme => "foo", path => "/over/there", query => "name=ferret"},
                 uri_string:parse("foo:/over/there?name=ferret")),
    ?assertMatch(#{scheme := "foo", host := "example.com", query := "name=ferret"},
                 uri_string:parse("foo://example.com?name=ferret")),
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/", query => "name=ferret"},
                 uri_string:parse("foo://example.com/?name=ferret")),
    ?assertEqual(#{path => "", query => "name=ferret"}, uri_string:parse("?name=ferret")),
    ?assertEqual(#{path => "over/there", query => "name=ferret"}, uri_string:parse("over/there?name=ferret")),
    ?assertEqual(#{path => "/", query => "name=ferret"}, uri_string:parse("/?name=ferret")),
    ?assertEqual(#{path => "/over/there", query => "name=ferret"}, uri_string:parse("/over/there?name=ferret")),
    ?assertMatch(#{host := "example.com", query := "name=ferret"}, uri_string:parse("//example.com?name=ferret")),
    ?assertEqual(#{host => "example.com", path => "/", query => "name=ferret"},
                 uri_string:parse("//example.com/?name=ferret")),
    %
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/", query => "name=%E5%90%88%E6%B0%97%E9%81%93"},
                 uri_string:parse("foo://example.com/?name=%E5%90%88%E6%B0%97%E9%81%93")),
    ?assertEqual(#{host => "example.com", path => "/", query => "name=%E5%90%88%E6%B0%97%E9%81%93"},
                 uri_string:parse("//example.com/?name=%E5%90%88%E6%B0%97%E9%81%93")),
    %
    ?assertMatch(#{scheme := "foo", fragment := "nose"}, uri_string:parse("foo:#nose")),
    ?assertEqual(#{scheme => "foo", path => "over/there", fragment => "nose"}, uri_string:parse("foo:over/there#nose")),
    ?assertEqual(#{scheme => "foo", path => "/over/there", fragment => "nose"},
                 uri_string:parse("foo:/over/there#nose")),
    ?assertMatch(#{scheme := "foo", host := "example.com", fragment := "nose"},
                 uri_string:parse("foo://example.com#nose")),
    ?assertEqual(#{scheme => "foo", host => "example.com", path => "/", fragment => "nose"},
                 uri_string:parse("foo://example.com/#nose")),
    ?assertMatch(#{scheme := "foo", host := "example.com", fragment := "nose"},
                 uri_string:parse("foo://example.com#nose")),
    ?assertMatch(#{fragment := "nose"}, uri_string:parse("#nose")),
    ?assertEqual(#{path => "over/there", fragment => "nose"}, uri_string:parse("over/there#nose")),
    ?assertEqual(#{path => "/", fragment => "nose"}, uri_string:parse("/#nose")),
    ?assertEqual(#{path => "/over/there", fragment => "nose"}, uri_string:parse("/over/there#nose")),
    ?assertMatch(#{host := "example.com", fragment := "nose"}, uri_string:parse("//example.com#nose")),
    ?assertEqual(#{host => "example.com", path => "/", fragment => "nose"}, uri_string:parse("//example.com/#nose")),
    %
    ?assertMatch(#{scheme := "foo", host := "example.com", fragment := "%E5%90%88%E6%B0%97%E9%81%93"},
                 uri_string:parse("foo://example.com#%E5%90%88%E6%B0%97%E9%81%93")),
    ?assertEqual(#{host => "example.com", path => "/", fragment => "%E5%90%88%E6%B0%97%E9%81%93"},
                 uri_string:parse("//example.com/#%E5%90%88%E6%B0%97%E9%81%93")),
    %
    ?assertEqual(#{scheme => "foo", path => "bar:nisse"}, uri_string:parse("foo:bar:nisse")),
    ?assertEqual(#{scheme => "foo", host => "example.com", port => 8042,
                   path => "/over/there", query => "name=ferret", fragment => "nose"},
                 uri_string:parse("foo://example.com:8042/over/there?name=ferret#nose")),
    ?assertEqual(#{scheme => "foo", userinfo => "admin:admin", host => "example.com",
                   port => 8042, path => "/over/there", query => "name=ferret", fragment => "nose"},
                 uri_string:parse("foo://admin:admin@example.com:8042/over/there?name=ferret#nose")),
    %
    ?assertEqual(#{scheme => <<"foo">>, path => <<"bar:nisse">>}, uri_string:parse(<<"foo:bar:nisse">>)),
    ?assertEqual(#{scheme => <<"foo">>, host => <<"example.com">>, port => 8042,
                   path => <<"/over/there">>, query => <<"name=ferret">>, fragment => <<"nose">>},
                 uri_string:parse(<<"foo://example.com:8042/over/there?name=ferret#nose">>)),
    ?assertEqual(#{scheme => <<"foo">>, userinfo => <<"admin:admin">>, host => <<"example.com">>, port => 8042,
                   path => <<"/over/there">>, query => <<"name=ferret">>, fragment => <<"nose">>},
                 uri_string:parse(<<"foo://admin:admin@example.com:8042/over/there?name=ferret#nose">>)),
    %
    ?assertEqual(#{scheme => "foo", path => "bar"}, uri_string:parse("fo" ++ <<"o:bar">>)),
    ?assertEqual(#{scheme => "foo", path => "bar"}, uri_string:parse("foo:b" ++ <<"ar">>)),
    ?assertEqual(#{scheme => "foo", path => "bar:bar"},
                 uri_string:parse([[102], [111, 111], <<":bar">>, 58, 98, 97, 114])),
    %
    ?assertEqual(#{path => "/path"}, uri_string:parse("/pa" ++ <<"th">>)),
    ?assertEqual(#{path => "foo"}, uri_string:parse("fo" ++ <<"o">>)),
    %
    ?assertMatch(#{host := "", query := ""}, uri_string:parse("//?")),
    ?assertMatch(#{fragment := "", host := ""}, uri_string:parse("//#")),
    ?assertMatch(#{host := "", query := "", scheme := "foo"}, uri_string:parse("foo://?")),
    ?assertMatch(#{fragment := "", host := "", scheme := "foo"}, uri_string:parse("foo://#")),
    ?assertEqual(#{host => <<>>, path => <<$/>>}, uri_string:parse(<<"///">>)),
    ?assertMatch(#{host := <<"hostname">>}, uri_string:parse(<<"//hostname">>)),
    ?assertEqual(#{host => <<>>, path => <<"/hostname">>}, uri_string:parse(<<"///hostname">>)),
    ?assertEqual(#{host => "", path => "/", query => ""}, uri_string:parse("///?")),
    ?assertEqual(#{fragment => "", host => "", path => "/"}, uri_string:parse("///#")),
    ?assertMatch(#{host := "foo", query := ""}, uri_string:parse("//foo?")),
    ?assertMatch(#{fragment := "", host := "foo"}, uri_string:parse("//foo#")),
    ?assertEqual(#{host => "foo", path => "/"}, uri_string:parse("//foo/")),
    ?assertMatch(#{host := "foo", query := "", scheme := "http"}, uri_string:parse("http://foo?")),
    ?assertMatch(#{fragment := "", host := "foo", scheme := "http"}, uri_string:parse("http://foo#")),
    ?assertEqual(#{host => "foo", path => "/", scheme => "http"}, uri_string:parse("http://foo/")),
    ?assertMatch(#{fragment := "", host := "host", port := 80, scheme := "http"}, uri_string:parse("http://host:80#")),
    ?assertMatch(#{host := "host", port := 80, query := "", scheme := "http"}, uri_string:parse("http://host:80?")),
    ?assertEqual(#{path => "", query => ""}, uri_string:parse("?")),
    ?assertEqual(#{path => "", query => "?"}, uri_string:parse("??")),
    ?assertEqual(#{path => "", query => "??"}, uri_string:parse("???")),
    %
    ?assertMatch(#{host := "", path := "/", port := 1, scheme := "a"}, uri_string:parse("a://:1/")),
    ?assertEqual(#{path => "/a/", scheme => "a"}, uri_string:parse("a:/a/")),
    ?assertEqual(#{host => "", path => "", userinfo => ""}, uri_string:parse("//@")),
    ?assertEqual(#{host => "", path => "", scheme => "foo", userinfo => ""}, uri_string:parse("foo://@")),
    ?assertEqual(#{host => "", path => "/", userinfo => ""}, uri_string:parse("//@/")),
    ?assertEqual(#{host => "", path => "/", scheme => "foo", userinfo => ""}, uri_string:parse("foo://@/")),
    ?assertEqual(#{host => "localhost", path => "/", port => undefined}, uri_string:parse("//localhost:/")),
    ?assertEqual(#{host => "", path => "", port => undefined}, uri_string:parse("//:")),
    %
    ?assertEqual({error, invalid_uri, "å"}, uri_string:parse("å")),
    ?assertEqual({error, invalid_uri, "å"}, uri_string:parse("aå:/foo")),
    ?assertEqual({error, invalid_uri, ":"}, uri_string:parse("foo://usär@host")),
    ?assertEqual({error, invalid_uri, "ö"}, uri_string:parse("//host/path?foö=bar")),
    ?assertEqual({error, invalid_uri, "ö"}, uri_string:parse("//host/path#foö")),
    ?assertEqual({error, invalid_uri, ":::127.0.0.1"}, uri_string:parse("//[:::127.0.0.1]")),
    ?assertEqual({error, invalid_uri, "A"}, uri_string:parse("//localhost:A8")),
    %
    ?assertEqual(#{host => "Bar", path => "", scheme => "FOo"}, uri_string:parse("FOo://Bar")),
    ?assertEqual(#{host => "bar", path => "", scheme => "foo"}, uri_string:parse("foo://bar")),
    ?assertEqual(#{host => "A%2f", path => "/%62ar", scheme => "foo"}, uri_string:parse("foo://A%2f/%62ar")),
    ?assertEqual(#{host => "a%2F", path => "/bar", scheme => "foo"}, uri_string:parse("foo://a%2F/bar")),
    ?assertEqual(#{host => "%C3%B6", path => "", scheme => "FOo"}, uri_string:parse("FOo://%C3%B6")),
    ok.

-define(QUERY, "name=örn").
-define(QUERY_ENC, "?name=%C3%B6rn").
-define(FRAGMENT, "näsa").
-define(FRAGMENT_ENC, "#n%C3%A4sa").

recompose_test() ->
    OTPRelease = list_to_integer(erlang:system_info(otp_release)),
    ?assertEqual(<<?FRAGMENT_ENC>>, uri_string:recompose(#{fragment => <<?FRAGMENT/utf8>>, path => <<>>})),
    ?assertEqual(?FRAGMENT_ENC, uri_string:recompose(#{fragment => ?FRAGMENT, path => ""})),
    ?assertEqual(<<?FRAGMENT_ENC>>, uri_string:recompose(uri_string:parse(<<?FRAGMENT_ENC>>))),
    ?assertEqual(?FRAGMENT_ENC, uri_string:recompose(uri_string:parse(?FRAGMENT_ENC))),
    %
    ?assertEqual(<<?QUERY_ENC>>, uri_string:recompose(#{query => <<?QUERY/utf8>>, path => <<>>})),
    ?assertEqual(<<?QUERY_ENC ?FRAGMENT_ENC>>,
                 uri_string:recompose(#{query => <<?QUERY/utf8>>, fragment => <<?FRAGMENT/utf8>>, path => <<>>})),
    ?assertEqual("?name=%C3%B6rn", uri_string:recompose(#{query => "name=örn", path => ""})),
    ?assertEqual("?name=%C3%B6rn#n%C3%A4sa",
                 uri_string:recompose(#{query => "name=örn", fragment => "näsa", path => ""})),
    %
    ?assertEqual(<<"?name=%C3%B6rn">>, uri_string:recompose(uri_string:parse(<<"?name=%C3%B6rn">>))),
    ?assertEqual(<<"?name=%C3%B6rn#n%C3%A4sa">>, uri_string:recompose(uri_string:parse(<<"?name=%C3%B6rn#n%C3%A4sa">>))),
    ?assertEqual("?name=%C3%B6rn", uri_string:recompose(uri_string:parse("?name=%C3%B6rn"))),
    ?assertEqual("?name=%C3%B6rn#n%C3%A4sa", uri_string:recompose(uri_string:parse("?name=%C3%B6rn#n%C3%A4sa"))),
    %
    ?assertEqual(<<"/d%C3%A4r">>, uri_string:recompose(#{path => <<"/där"/utf8>>})),
    ?assertEqual(<<"/d%C3%A4r#n%C3%A4sa">>,
                 uri_string:recompose(#{path => <<"/där"/utf8>>, fragment => <<"näsa"/utf8>>})),
    ?assertEqual(<<"/d%C3%A4r?name=%C3%B6rn">>,
                 uri_string:recompose(#{path => <<"/där"/utf8>>, query => <<"name=örn"/utf8>>})),
    ?assertEqual(<<"/d%C3%A4r?name=%C3%B6rn#n%C3%A4sa">>,
                 uri_string:recompose(#{path => <<"/där"/utf8>>, query => <<"name=örn"/utf8>>,
                                        fragment => <<"näsa"/utf8>>})),
    ?assertEqual("/d%C3%A4r", uri_string:recompose(#{path => "/där"})),
    ?assertEqual("/d%C3%A4r#n%C3%A4sa", uri_string:recompose(#{path => "/där", fragment => "näsa"})),
    ?assertEqual("/d%C3%A4r?name=%C3%B6rn", uri_string:recompose(#{path => "/där", query => "name=örn"})),
    ?assertEqual("/d%C3%A4r?name=%C3%B6rn#n%C3%A4sa",
                 uri_string:recompose(#{path => "/där", query => "name=örn", fragment => "näsa"})),
    %
    ?assertEqual(<<"/d%C3%A4r">>, uri_string:recompose(uri_string:parse(<<"/d%C3%A4r">>))),
    ?assertEqual(<<"/d%C3%A4r#n%C3%A4sa">>, uri_string:recompose(uri_string:parse(<<"/d%C3%A4r#n%C3%A4sa">>))),
    ?assertEqual(<<"/d%C3%A4r?name=%C3%B6rn">>, uri_string:recompose(uri_string:parse(<<"/d%C3%A4r?name=%C3%B6rn">>))),
    ?assertEqual("/d%C3%A4r", uri_string:recompose(uri_string:parse("/d%C3%A4r"))),
    ?assertEqual("/d%C3%A4r#n%C3%A4sa", uri_string:recompose(uri_string:parse("/d%C3%A4r#n%C3%A4sa"))),
    ?assertEqual("/d%C3%A4r?name=%C3%B6rn", uri_string:recompose(uri_string:parse("/d%C3%A4r?name=%C3%B6rn"))),
    %
    ?assertEqual("FOo://Bar", uri_string:recompose(#{host => "Bar",path => [],scheme => "FOo"})),
    ?assertEqual("foo://bar", uri_string:recompose(#{host => "bar",path => [],scheme => "foo"})),
    ?assertEqual("foo://A%2f/%62ar", uri_string:recompose(#{host => "A%2f",path => "/%62ar",scheme => "foo"})),
    ?assertEqual("foo://a%2F/bar", uri_string:recompose(#{host => "a%2F",path => "/bar",scheme => "foo"})),
    ?assertEqual("FOo://%C3%B6", uri_string:recompose(#{host => "%C3%B6",path => [],scheme => "FOo"})),
    ?assertEqual("FOo://%C3%B6", uri_string:recompose(#{host => "ö",path => [],scheme => "FOo"})),
    %
    (OTPRelease >= 23 orelse OTPRelease < 21) andalso
    begin
    ?assertEqual("//example.com/.foo", uri_string:recompose(#{host => "example.com", path => ".foo"})),
    ?assertEqual(<<"//example.com/foo">>, uri_string:recompose(#{host => <<"example.com">>, path => <<"foo">>}))
    end,
    %
    (OTPRelease =/= 23 orelse application:get_key(stdlib, vsn) =/= {ok,"3.13.2"}) andalso
    begin
    ?assertEqual("//example.com/foo", uri_string:recompose(#{host => "example.com", path => ["/", "foo"]})),
    ?assertEqual("//example.com/foo", uri_string:recompose(#{host => <<"example.com">>, path => [<<"/">>,<<"foo">>]})),
    ?assertEqual("//example.com/foo", uri_string:recompose(#{host => "example.com", path => ["/f", "oo"]})),
    ?assertEqual("//example.com/foo", uri_string:recompose(#{host => <<"example.com">>, path => [<<"/f">>,<<"oo">>]}))
    end,
    ok.

quote_test() ->
    QuoteData = [%% reserved/gen-delims
                 #{unquoted => ":", quoted => "%3A", unquoted_b => <<$:>>, quoted_b => <<"%3A">>},
                 #{unquoted => "/", quoted => "%2F", unquoted_b => <<$/>>, quoted_b => <<"%2F">>},
                 #{unquoted => "?", quoted => "%3F", unquoted_b => <<$?>>, quoted_b => <<"%3F">>},
                 #{unquoted => "#", quoted => "%23", unquoted_b => <<$#>>, quoted_b => <<"%23">>},
                 #{unquoted => "[", quoted => "%5B", unquoted_b => <<$[>>, quoted_b => <<"%5B">>},
                 #{unquoted => "]", quoted => "%5D", unquoted_b => <<$]>>, quoted_b => <<"%5D">>},
                 #{unquoted => "@", quoted => "%40", unquoted_b => <<$@>>, quoted_b => <<"%40">>},
                 %% reserved/sub-delims
                 #{unquoted => "!", quoted => "%21", unquoted_b => <<$!>>, quoted_b => <<"%21">>},
                 #{unquoted => "$", quoted => "%24", unquoted_b => <<$$>>, quoted_b => <<"%24">>},
                 #{unquoted => "&", quoted => "%26", unquoted_b => <<$&>>, quoted_b => <<"%26">>},
                 #{unquoted => "'", quoted => "%27", unquoted_b => <<$'>>, quoted_b => <<"%27">>},
                 #{unquoted => "(", quoted => "%28", unquoted_b => <<$(>>, quoted_b => <<"%28">>},
                 #{unquoted => ")", quoted => "%29", unquoted_b => <<$)>>, quoted_b => <<"%29">>},
                 #{unquoted => "*", quoted => "%2A", unquoted_b => <<$*>>, quoted_b => <<"%2A">>},
                 #{unquoted => "+", quoted => "%2B", unquoted_b => <<$+>>, quoted_b => <<"%2B">>},
                 #{unquoted => ",", quoted => "%2C", unquoted_b => <<$,>>, quoted_b => <<"%2C">>},
                 #{unquoted => ";", quoted => "%3B", unquoted_b => <<$;>>, quoted_b => <<"%3B">>},
                 #{unquoted => "=", quoted => "%3D", unquoted_b => <<$=>>, quoted_b => <<"%3D">>},
                 %% other not unreserved
                 #{unquoted => "<", quoted => "%3C", unquoted_b => <<$<>>, quoted_b => <<"%3C">>},
                 #{unquoted => ">", quoted => "%3E", unquoted_b => <<$>>>, quoted_b => <<"%3E">>},
                 #{unquoted => "\"", quoted => "%22", unquoted_b => <<$">>, quoted_b => <<"%22">>},
                 #{unquoted => "{", quoted => "%7B", unquoted_b => <<${>>, quoted_b => <<"%7B">>},
                 #{unquoted => "}", quoted => "%7D", unquoted_b => <<$}>>, quoted_b => <<"%7D">>},
                 #{unquoted => "|", quoted => "%7C", unquoted_b => <<$|>>, quoted_b => <<"%7C">>},
                 #{unquoted => "\\", quoted => "%5C", unquoted_b => <<$\\>>, quoted_b => <<"%5C">>},
                 #{unquoted => "^", quoted => "%5E", unquoted_b => <<$^>>, quoted_b => <<"%5E">>},
                 #{unquoted => "%", quoted => "%25", unquoted_b => <<$%>>, quoted_b => <<"%25">>},
                 #{unquoted => " ", quoted => "%20", unquoted_b => <<$\s>>, quoted_b => <<"%20">>},
                 %% non-ASCII
                 #{unquoted => "örebro", quoted => "%C3%B6rebro",
                   unquoted_b => <<"örebro"/utf8>>, quoted_b => <<"%C3%B6rebro">>},
                 #{unquoted => "Łódź", quoted => "%C5%81%C3%B3d%C5%BA",
                   unquoted_b => <<"Łódź"/utf8>>, quoted_b => <<"%C5%81%C3%B3d%C5%BA">>},
                 %% unreserved non alpha, non digit characters
                 #{unquoted => "-", quoted => "-", unquoted_b => <<$->>, quoted_b => <<$->>},
                 #{unquoted => ".", quoted => ".", unquoted_b => <<$.>>, quoted_b => <<$.>>},
                 #{unquoted => "_", quoted => "_", unquoted_b => <<$_>>, quoted_b => <<$_>>},
                 #{unquoted => "~", quoted => "~", unquoted_b => <<$~>>, quoted_b => <<$~>>}],
    lists:foreach(fun(#{unquoted := U, quoted := Q}) -> test_quote(U, Q) end, QuoteData),
    lists:foreach(fun(#{unquoted_b := U, quoted_b := Q}) -> test_quote(U, Q) end, QuoteData),
    lists:foreach(fun(#{unquoted := U}) -> test_quote_unquote(U) end, QuoteData),
    lists:foreach(fun(#{unquoted_b := U}) -> test_quote_unquote(U) end, QuoteData),
    lists:foreach(fun(#{unquoted := U, quoted := Q}) -> test_quote_with_safe_list(U, Q) end, QuoteData),
    lists:foreach(fun(#{unquoted_b := U, quoted_b := Q}) -> test_quote_with_safe_list(U, Q) end, QuoteData),
    %% / used as data see GH-5368
    application:get_key(stdlib, vsn) =/= {ok,"3.13.2"} andalso
    begin
    ?assertEqual("https://internal.api.com/devices/Ethernet0%2F4",
                 uri_string:recompose(#{scheme => "https", host => "internal.api.com",
                                        path => compose_path(["devices", "Ethernet0/4"], "")})),
    %% sub-delims as data
    %% in this example ComposePath must treat sub-delims and '%' as safe character
    %% to avoid re-encoding encoded characters
    ?assertEqual("yeti://localhost/folder/file.txt,version=1%2C1",
                 uri_string:recompose(#{scheme => "yeti", host => "localhost",
                                        path => compose_path(["folder", "file.txt,version=" ++ uri_string:quote("1,1")],
                                                             ",=%")})),
    %% percent character as data
    ?assertEqual("yeti://localhost/folder/file_with_%25.txt",
                 uri_string:recompose(#{scheme => "yeti", host => "localhost",
                                        path => compose_path(["folder", "file_with_" ++ uri_string:quote("%") ++ ".txt"],
                                                             "%")}))
    end,
    ok.

resolve_test() ->
    BaseURI = <<"http://a/b/c/d;p?q">>,
    ?assertEqual(<<"g:h">>, uri_string:resolve(<<"g:h">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g">>, uri_string:resolve(<<$g>>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g">>, uri_string:resolve(<<"./g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g/">>, uri_string:resolve(<<"g/">>, BaseURI)),
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"/g">>, BaseURI)),
    ?assertEqual(<<"http://g">>, uri_string:resolve(<<"//g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/d;p?y">>, uri_string:resolve(<<"?y">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g?y">>, uri_string:resolve(<<"g?y">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/d;p?q#s">>, uri_string:resolve(<<"#s">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g#s">>, uri_string:resolve(<<"g#s">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g?y#s">>, uri_string:resolve(<<"g?y#s">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/;x">>, uri_string:resolve(<<";x">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g;x">>, uri_string:resolve(<<"g;x">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g;x?y#s">>, uri_string:resolve(<<"g;x?y#s">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/d;p?q">>, uri_string:resolve(<<>>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/">>, uri_string:resolve(<<$.>>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/">>, uri_string:resolve(<<"./">>, BaseURI)),
    ?assertEqual(<<"http://a/b/">>, uri_string:resolve(<<"..">>, BaseURI)),
    ?assertEqual(<<"http://a/b/">>, uri_string:resolve(<<"../">>, BaseURI)),
    ?assertEqual(<<"http://a/b/g">>, uri_string:resolve(<<"../g">>, BaseURI)),
    ?assertEqual(<<"http://a/">>, uri_string:resolve(<<"../..">>, BaseURI)),
    ?assertEqual(<<"http://a/">>, uri_string:resolve(<<"../../">>, BaseURI)),
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"../../g">>, BaseURI)),
    %
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"../../../g">>, BaseURI)),
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"../../../../g">>, BaseURI)),
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"/./g">>, BaseURI)),
    ?assertEqual(<<"http://a/g">>, uri_string:resolve(<<"/../g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g.">>, uri_string:resolve(<<"g.">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/.g">>, uri_string:resolve(<<".g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g..">>, uri_string:resolve(<<"g..">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/..g">>, uri_string:resolve(<<"..g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/g">>, uri_string:resolve(<<"./../g">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g/">>, uri_string:resolve(<<"./g/.">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g/h">>, uri_string:resolve(<<"g/./h">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/h">>, uri_string:resolve(<<"g/../h">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g;x=1/y">>, uri_string:resolve(<<"g;x=1/./y">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/y">>, uri_string:resolve(<<"g;x=1/../y">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g?y/./x">>, uri_string:resolve(<<"g?y/./x">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g?y/../x">>, uri_string:resolve(<<"g?y/../x">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g#s/./x">>, uri_string:resolve(<<"g#s/./x">>, BaseURI)),
    ?assertEqual(<<"http://a/b/c/g#s/../x">>, uri_string:resolve(<<"g#s/../x">>, BaseURI)),
    ?assertEqual(<<"http:g">>, uri_string:resolve(<<"http:g">>, BaseURI)), %% for strict parsers
    %% The scheme is required (RFC3986 5.2.1).
    ?assertEqual({error, invalid_scheme, ""}, uri_string:resolve("g", #{})),
    ?assertEqual({error, invalid_scheme, ""}, uri_string:resolve("g", "/b/c/d")),
    ?assertEqual("foo:g", uri_string:resolve("g", "foo:")),
    ?assertEqual("foo://a/g", uri_string:resolve("g", "foo://a")),
    ?assertEqual("foo:/g", uri_string:resolve("g", "foo:/a")),
    ?assertEqual("foo://a/b/c/g", uri_string:resolve("g", "foo://a/b/c/d;p?y#f")),
    %
    ?assertEqual(#{scheme => <<"http">>, host => <<$a>>, path => <<"/b/c/g">>},
                 uri_string:resolve(<<$g>>, BaseURI, [return_map])),
    ok.

transcode_test() ->
    ?assertEqual(<<"foo%C3%B6bar"/utf8>>,
                 uri_string:transcode(<<"foo%00%00%00%F6bar"/utf32>>, [{in_encoding, utf32}, {out_encoding, utf8}])),
    ?assertEqual("foo%C3%B6bar",
                 uri_string:transcode("foo%00%00%00%F6bar", [{in_encoding, utf32}, {out_encoding, utf8}])),
    ?assertEqual(<<"foo%00%00%00%F6bar"/utf32>>,
                 uri_string:transcode(<<"foo%C3%B6bar"/utf8>>, [{in_encoding, utf8}, {out_encoding, utf32}])),
    ?assertEqual("foo%00%00%00%F6bar",
                 uri_string:transcode("foo%C3%B6bar", [{in_encoding, utf8}, {out_encoding, utf32}])),
    ?assertEqual("foo%C3%B6bar", uri_string:transcode("foo%F6bar", [{in_encoding, latin1}, {out_encoding, utf8}])),
    %
    ?assertEqual(<<"foo%C3%B6bar"/utf8>>, uri_string:transcode(<<"foo%C3%B6bar"/utf8>>, [])),
    ?assertEqual(<<"foo%C3%B6bar"/utf8>>, uri_string:transcode(<<"foo%00%00%00%F6bar"/utf32>>, [{in_encoding, utf32}])),
    ?assertEqual(<<"foo%00%00%00%F6bar"/utf32>>, uri_string:transcode(<<"foo%C3%B6bar"/utf8>>, [{out_encoding, utf32}])),
    %
    ?assertEqual("foo%00%00%00%F6bar",
                 uri_string:transcode(["foo", <<"%C3%B6"/utf8>>, <<"ba"/utf8>>, "r"], [{out_encoding, utf32}])),
    ?assertEqual("foo%00%00%00%F6bar",
                 uri_string:transcode(["foo", <<"%C3%"/utf8>>, <<"B6ba"/utf8>>, "r"], [{out_encoding, utf32}])),
    ?assertEqual("foo%C3%B6bar",
                 uri_string:transcode(["foo%00", <<"%00%0"/utf32>>, <<"0%F"/utf32>>, "6bar"],
                                      [{in_encoding, utf32}, {out_encoding, utf8}])),
    %
    ?assertEqual({error, invalid_percent_encoding, "%BXbar"},
                 uri_string:transcode(<<"foo%C3%BXbar"/utf8>>, [{in_encoding, utf8}, {out_encoding, utf32}])),
    ?assertEqual({error, invalid_input, <<"ö">>},
                 uri_string:transcode("foo%F6bar", [{in_encoding, utf8}, {out_encoding, utf8}])),
    ok.

compose_path(PathSegments, Safe) -> [[$/|uri_string:quote(S, Safe)] || S <- PathSegments].

head([H|_]) -> H;
head(<<H, _/binary>>) -> H.

test_quote(Unquoted, Quoted) -> ?assertEqual(Quoted, uri_string:quote(Unquoted)).

test_quote_unquote(Unquoted) ->
    %% case below should be removed when functions used are removed
    list_to_integer(erlang:system_info(otp_release)) >= 20 andalso
    head(Unquoted) =< 127 andalso ?assertEqual(Unquoted, http_uri:decode(http_uri:encode(Unquoted))),
    ?assertEqual(Unquoted, uri_string:unquote(uri_string:quote(Unquoted))).

test_quote_with_safe_list(Unquoted, Quoted) ->
    Safe = "!$()*", %% characters not encoded by old http_uri:encode
    Result = uri_string:quote(Unquoted, Safe),
    %% case below should be removed when function used are removed
    list_to_integer(erlang:system_info(otp_release)) >= 20 andalso
    head(Unquoted) =< 127 andalso ?assertEqual(Result, http_uri:encode(Unquoted)),
    case lists:member(head(Unquoted), Safe) of
        true -> ?assertEqual(Unquoted, Result);
        false -> ?assertEqual(Quoted, Result)
    end.
