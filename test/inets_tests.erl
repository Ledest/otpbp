-module(inets_tests).

-ifdef(OTP_RELEASE).
-if(?OTP_RELEASE >= 21).
-compile({parse_transform, otpbp_pt}).

-if(?OTP_RELEASE =:= 23 orelse ?OTP_RELEASE =:= 24).
-compile(nowarn_deprecated_function).
-endif.

-include_lib("eunit/include/eunit.hrl").

http_uri_test() ->
    %% ipv4
    ?assertEqual({ok, {http, [], "127.0.0.1", 80, "/foobar.html", []}}, http_uri:parse("http://127.0.0.1/foobar.html")),
    ?assertEqual({ok, {http, <<>>, <<"127.0.0.1">>, 80, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://127.0.0.1/foobar.html">>)),
    %% ipv6
    ?assertEqual({ok, {http, [], "2010:836B:4179::836B:4179", 80, "/foobar.html", []}},
                 http_uri:parse("http://[2010:836B:4179::836B:4179]/foobar.html")),
    ?assertEqual({ok, {http, [], "[2010:836B:4179::836B:4179]", 80, "/foobar.html", []}},
                 http_uri:parse("http://[2010:836B:4179::836B:4179]/foobar.html", [{ipv6_host_with_brackets, true}])),
    ?assertEqual({ok, {http, [], "2010:836B:4179::836B:4179", 80, "/foobar.html", []}},
                 http_uri:parse("http://[2010:836B:4179::836B:4179]/foobar.html", [{ipv6_host_with_brackets, false}])),
    ?assertEqual({ok, {http, [], "2010:836B:4179::836B:4179", 80, "/foobar.html", []}},
                 http_uri:parse("http://[2010:836B:4179::836B:4179]/foobar.html", [{foo, false}])),
    ?assertMatch({error, {malformed_url, _, "http://2010:836B:4179::836B:4179/foobar.html"}},
                 http_uri:parse("http://2010:836B:4179::836B:4179/foobar.html")),
    ?assertEqual({ok, {http, <<>>, <<"2010:836B:4179::836B:4179">>, 80, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://[2010:836B:4179::836B:4179]/foobar.html">>)),
    ?assertEqual({ok, {http, <<>>, <<"[2010:836B:4179::836B:4179]">>, 80, <<"/foobar.html">>,<<>>}},
                 http_uri:parse(<<"http://[2010:836B:4179::836B:4179]/foobar.html">>,
                                [{ipv6_host_with_brackets, true}])),
    ?assertEqual({ok, {http, <<>>, <<"2010:836B:4179::836B:4179">>, 80, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://[2010:836B:4179::836B:4179]/foobar.html">>,
                                [{ipv6_host_with_brackets, false}])),
    ?assertEqual({ok, {http, <<>>, <<"2010:836B:4179::836B:4179">>, 80, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://[2010:836B:4179::836B:4179]/foobar.html">>, [{foo, false}])),
    ?assertMatch({error, {malformed_url, _, <<"http://2010:836B:4179::836B:4179/foobar.html">>}},
                 http_uri:parse(<<"http://2010:836B:4179::836B:4179/foobar.html">>)),
    %% host
    ?assertEqual({ok, {http, [], "localhost", 8888, "/foobar.html", []}},
                 http_uri:parse("http://localhost:8888/foobar.html")),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 8888, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://localhost:8888/foobar.html">>)),
    %% userinfo
    ?assertEqual({ok, {http, "nisse:foobar", "localhost", 8888, "/foobar.html", []}},
                 http_uri:parse("http://nisse:foobar@localhost:8888/foobar.html")),
    ?assertEqual({ok, {http, <<"nisse:foobar">>, <<"localhost">>, 8888, <<"/foobar.html">>, <<>>}},
                 http_uri:parse(<<"http://nisse:foobar@localhost:8888/foobar.html">>)),
    %% scheme
    ?assertEqual({error, no_scheme}, http_uri:parse("localhost/foobar.html")),
    ?assertMatch({error, {malformed_url, _, _}}, http_uri:parse("localhost:8888/foobar.html")),
    ?assertEqual({error, no_scheme}, http_uri:parse(<<"localhost/foobar.html">>)),
    ?assertMatch({error, {malformed_url, _, _}}, http_uri:parse(<<"localhost:8888/foobar.html">>)),
    %% queries
    ?assertEqual({ok, {http, [], "localhost", 8888, "/foobar.html", "?foo=bar&foobar=42"}},
                 http_uri:parse("http://localhost:8888/foobar.html?foo=bar&foobar=42")),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 8888, <<"/foobar.html">>, <<"?foo=bar&foobar=42">>}},
                 http_uri:parse(<<"http://localhost:8888/foobar.html?foo=bar&foobar=42">>)),
    %% fragments
    ?assertEqual({ok, {http, [], "localhost", 80, "/", ""}}, http_uri:parse("http://localhost#fragment")),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", ""}}, http_uri:parse("http://localhost/path#fragment")),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "?query"}}, http_uri:parse("http://localhost?query#fragment")),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "?query"}},
                 http_uri:parse("http://localhost/path?query#fragment")),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "", "#fragment"}},
                 http_uri:parse("http://localhost#fragment", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "", "#fragment"}},
                 http_uri:parse("http://localhost/path#fragment", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "?query", "#fragment"}},
                 http_uri:parse("http://localhost?query#fragment", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "?query", "#fragment"}},
                 http_uri:parse("http://localhost/path?query#fragment", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "", ""}}, http_uri:parse("http://localhost", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "", ""}},
                 http_uri:parse("http://localhost/path", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "?query", ""}},
                 http_uri:parse("http://localhost?query", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "?query", ""}},
                 http_uri:parse("http://localhost/path?query", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "", "#"}},
                 http_uri:parse("http://localhost#", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "", "#"}},
                 http_uri:parse("http://localhost/path#", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/", "?query", "#"}},
                 http_uri:parse("http://localhost?query#", [{fragment, true}])),
    ?assertEqual({ok, {http, [], "localhost", 80, "/path", "?query", "#"}},
                 http_uri:parse("http://localhost/path?query#", [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>}},
                 http_uri:parse(<<"http://localhost#fragment">>)),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<>>}},
                 http_uri:parse(<<"http://localhost/path#fragment">>)),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<"?query">>}},
                 http_uri:parse(<<"http://localhost?query#fragment">>)),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<"?query">>}},
                 http_uri:parse(<<"http://localhost/path?query#fragment">>)),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>, <<"#fragment">>}},
                 http_uri:parse(<<"http://localhost#fragment">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<>>, <<"#fragment">>}},
                 http_uri:parse(<<"http://localhost/path#fragment">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<"?query">>, <<"#fragment">>}},
                 http_uri:parse(<<"http://localhost?query#fragment">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<"?query">>, <<"#fragment">>}},
                 http_uri:parse(<<"http://localhost/path?query#fragment">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>, <<>>}},
                 http_uri:parse(<<"http://localhost">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<>>, <<>>}},
                 http_uri:parse(<<"http://localhost/path">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<"?query">>, <<>>}},
                 http_uri:parse(<<"http://localhost?query">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<"?query">>, <<>>}},
                 http_uri:parse(<<"http://localhost/path?query">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>, <<"#">>}},
                 http_uri:parse(<<"http://localhost#">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<>>, <<"#">>}},
                 http_uri:parse(<<"http://localhost/path#">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<"?query">>, <<"#">>}},
                 http_uri:parse(<<"http://localhost?query#">>, [{fragment, true}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/path">>, <<"?query">>, <<"#">>}},
                 http_uri:parse(<<"http://localhost/path?query#">>, [{fragment, true}])),
    %% hexed_query
    lists:foreach(fun(URI) ->
                      ?assertMatch({ok, {http, [], "www.google.com", 80, "/search", _}},
                                   http_uri:parse("http://www.google.com/search" ++ URI))
                  end,
                  ["?hl=en&q=a%D1%85%D1%83%D0%B9&btnG=Google+Search", "?hl=en&q=%25%25", "?hl=en&q=%foo"]),
    %% escaped
    ?assertEqual({ok, {http, [], "www.somedomain.com", 80, "/%2Eabc", []}},
                 http_uri:parse("http://www.somedomain.com/%2Eabc")),
    ?assertEqual({ok, {http, [], "www.somedomain.com", 80, "/%252Eabc", []}},
                 http_uri:parse("http://www.somedomain.com/%252Eabc")),
    ?assertEqual({ok, {http, [], "www.somedomain.com", 80, "/%25abc", []}},
                 http_uri:parse("http://www.somedomain.com/%25abc")),
    ?assertEqual({ok, {http, [], "www.somedomain.com", 80, "/%25abc", "?foo=bar"}},
                 http_uri:parse("http://www.somedomain.com/%25abc?foo=bar")),
    ?assertEqual({ok, {http, <<>>, <<"www.somedomain.com">>, 80, <<"/%2Eabc">>, <<>>}},
                 http_uri:parse(<<"http://www.somedomain.com/%2Eabc">>)),
    ?assertEqual({ok, {http, <<>>, <<"www.somedomain.com">>, 80, <<"/%252Eabc">>, <<>>}},
                 http_uri:parse(<<"http://www.somedomain.com/%252Eabc">>)),
    ?assertEqual({ok, {http, <<>>, <<"www.somedomain.com">>, 80, <<"/%25abc">>, <<>>}},
                 http_uri:parse(<<"http://www.somedomain.com/%25abc">>)),
    ?assertEqual({ok, {http, <<>>, <<"www.somedomain.com">>, 80, <<"/%25abc">>, <<"?foo=bar">>}},
                 http_uri:parse(<<"http://www.somedomain.com/%25abc?foo=bar">>)),
    %% scheme_validation
    ?assertEqual({ok, {http, [], "localhost", 80, "/", ""}}, http_uri:parse("http://localhost#fragment")),
    ValidationFun = fun("http") -> valid;
                       (<<"http">>) -> valid;
                       (_) -> {error, bad_scheme}
                    end,
    ?assertEqual({ok, {http, [], "localhost", 80, "/", ""}},
                 http_uri:parse("http://localhost#fragment", [{scheme_validation_fun, ValidationFun}])),
    ?assertEqual({error, bad_scheme},
              http_uri:parse("https://localhost#fragment", [{scheme_validation_fun, ValidationFun}])),
    ?assertEqual({ok, {https, [], "localhost", 443, "/", ""}},
                 http_uri:parse("https://localhost#fragment", [{scheme_validation_fun, none}])),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>}},
                 http_uri:parse(<<"http://localhost#fragment">>)),
    ?assertEqual({ok, {http, <<>>, <<"localhost">>, 80, <<"/">>, <<>>}},
                http_uri:parse(<<"http://localhost#fragment">>, [{scheme_validation_fun, ValidationFun}])),
    ?assertEqual({error, bad_scheme},
                 http_uri:parse(<<"https://localhost#fragment">>, [{scheme_validation_fun, ValidationFun}])),
    ?assertEqual({ok, {https, <<>>, <<"localhost">>, 443, <<"/">>, <<>>}},
                 http_uri:parse(<<"https://localhost#fragment">>, [{scheme_validation_fun, none}])),
    %% encode
    ?assertEqual("foo%20bar", http_uri:encode("foo bar")),
    ?assertEqual(<<"foo%20bar">>, http_uri:encode(<<"foo bar">>)),
    %% decode
    ?assertEqual("foo+bar", http_uri:decode("foo+bar")),
    ?assertEqual(<<"foo+bar">>, http_uri:decode(<<"foo+bar">>)),
    ?assertEqual("foo bar", http_uri:decode("foo%20bar")),
    ?assertEqual(<<"foo bar">>, http_uri:decode(<<"foo%20bar">>)),
    ?assertEqual("foo\r\n", http_uri:decode("foo%0D%0A")),
    ?assertEqual(<<"foo\r\n">>, http_uri:decode(<<"foo%0D%0A">>)),
    ok.
-endif.
-endif.
